name: Create Release

on:
  workflow_call:
    outputs:
      version:
        value: ${{ jobs.release.outputs.version }}

jobs:

  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.metadata.outputs.version }}
    steps:

      - name: Checkout Repo
        uses: actions/checkout@v3


      - name: Cache node-modules 
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm install --global semantic-release@v19.0.5

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: > 
          semantic-release
          
      - name: Set Metadata
        id: metadata
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG: ${LATEST_TAG}"
          
          LATEST_VERSION=$(echo "${LATEST_TAG}" | cut -c 2-)
          echo "LATEST_VERSION: ${LATEST_VERSION}"
          
          HEAD_TAGS=$(git tag --points-at HEAD)
          echo "HEAD_TAGS: ${HEAD_TAGS}"
          
          IS_HEAD_LATEST=$(echo "${HEAD_TAGS}" | grep -x "${LATEST_TAG}" | wc -l)
          echo "IS_HEAD_LATEST: ${IS_HEAD_LATEST}"
          
          if [[ "${IS_HEAD_LATEST}" == "0" ]]
          then
            echo "release=false" >> $GITHUB_OUTPUT
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          else
            echo "release=true" >> $GITHUB_OUTPUT
            echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          fi
          
      - name: Read Metadata
        run: |
          echo "Version: ${{ steps.metadata.outputs.version }}"
          